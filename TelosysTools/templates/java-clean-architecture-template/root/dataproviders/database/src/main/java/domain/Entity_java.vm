#parse ( "include/loader_stringutils.vm" )
#parse ( "include/loader_inflector.vm" )
#parse ( "include/domain_info.vm" )
#set( $tableName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($pluralEntityName), "_").toUpperCase() ) 
package ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.domain;

#parse ( "root/dataproviders/database/src/main/java/domain/Entity_Imports_java.vm" )

#include ( "/include/author.vm" )

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Entity
@Table(name = "${tableName}"#if ( $domainUkKeys.size() > 0 ),
       uniqueConstraints = {
#end
#foreach( $field in $domainUkKeys )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.databaseName), "_").toUpperCase() ) 
            @UniqueConstraint(columnNames = {"${columnName}"}, name = "UN_${tableName}_${columnName}"),
#end
#if ( $domainUkKeys.size() > 0 )
       },
#end
#if ( $domainIndexes.size() > 0 )
       indexes = {
#foreach( $field in $domainIndexes )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.name), "_").toUpperCase() )
#if ( $strUtils.isBlank( $field.databaseComment) )
            @Index(columnList = "${columnName}_ID", name = "IDX_${tableName}_${columnName}_ID"),
#else 
            @Index(columnList = "${columnName}", name = "IDX_${tableName}_${columnName}"),
#end
#end
       }
#end
)
public class ${entity.name}Entity implements Serializable {

#parse ( "include/serial_version.vm" )
#foreach( $field in $domainKeys )
#set( $prefix = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($entity.name), "_").toUpperCase() ) 
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.databaseName), "_").toUpperCase() )  
    
    @Access(AccessType.PROPERTY)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "${prefix}_${columnName}", updatable = false, insertable = false)
#if ( $field.isLongType() )
    private Long $field.name;
#else
    private $field.type $field.name;
#end
#end
#foreach( $link in $domainLinks )
#if ( $link.isCardinalityManyToOne() )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($link.fieldName), "_").toUpperCase() )  

    @JoinColumn(name = "${columnName}_ID", foreignKey = @ForeignKey(name = "FK_${tableName}_${columnName}_ID"))
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private ${link.fieldType}Entity $link.fieldName;
#elseif ( $link.isCardinalityOneToMany() )

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.PERSIST, CascadeType.REMOVE, CascadeType.MERGE}, orphanRemoval = true, mappedBy = "${uncapitalizeEntityName}")
    @Fetch(FetchMode.SELECT)
    @JsonBackReference
    private ${link.fieldType}Entity $link.fieldName;
#end
#end
#foreach( $link in $domainEnumerators )
#if ( $link.isCardinalityManyToOne() )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($link.fieldName), "_").toUpperCase() )  

    @Column(name = "${columnName}", nullable = false)
    private String $link.fieldName;
#elseif ( $link.isCardinalityOneToMany() )

    private List<String> $wordUtils.capitalize($inflector.getInstance().pluralize($link.fieldName));
#end
#end
#foreach( $field in $domainAttributes )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.databaseName), "_").toUpperCase() )  

    @Column(name = "${columnName}", nullable = false)
#if ( $field.type.contains("Enum_") )
    private String $field.name;
#elseif ( $field.isLongType() )
    private Long $field.name;
#elseif ( $field.isDecimalType() )
    private BigDecimal $field.name;
#elseif ( $field.isBooleanType() )
    private Boolean $field.name;
#elseif ( $field.isDateType() )
    private LocalDate $field.name;
#elseif ( $field.isTimestampType() )
    private LocalDateTime $field.name;
#else
    private $field.type $field.name;
#end
#end
}
